<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.apache.wink</groupId>
    <artifactId>wink-site-deploy</artifactId>
    <packaging>pom</packaging>
    <name>Wink Scripts :: Site Deploy</name>
    <properties>
    </properties>
    <parent>
        <groupId>org.apache.wink</groupId>
        <artifactId>wink-scripts</artifactId>
        <version>0.1-incubating-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <build>
        <plugins>
            <!--This plugin will be used only in the Quick Build system or any place that will operate the "site-deploy" command.
                This plugin was added to support the maven site. The ant task will run after "site-deploy" to create an HTML that will include
                links to all revision's maven sites that exist under the "sitedir".
            -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>ant.site.deploy</id>
                        <phase>site-deploy</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <tasks>

                        <property name="sitedir" value="${site.deploy.dir}" />
                        <property name="latest.site.dir" value="${sitedir}/latest" />
                        <property name="tmp.latest.site.dir" value="${sitedir}/latest_tmp" />
                        <property name="tmp.latest.todelete.site.dir" value="${sitedir}/latestToDelete" />
                        <property name="file.system.dir" value="${file.system.site.deploy.dir}" />
                        <property name="file.system.site.dir" value="${file.system.dir}/${project.version}" />
                        <property name="tmp.file.system.todelete.site.dir" value="${file.system.dir}/latestToDelete" />
                        <property name="tmp.file.system.site.dir" value="${file.system.site.dir}_tmp" />
                        <property name="src.doc.dir" value="${basedir}/../../src/doc" />
                        <property name="site.docs.dir" value="${tmp.latest.site.dir}/docs" />

                        <mkdir dir="${site.docs.dir}" />
                        <!-- Copy PDF Developer Guide that exists under trunk/src/doc/DeveloperGuide into the site directory -->
                        <copy file="${src.doc.dir}/DeveloperGuide/Apache_Wink_User_Guide.pdf" todir="${site.docs.dir}"/>
                        <!-- Copy license files to site dir -->
                        <copy file="${src.doc.dir}/LICENSE.txt" todir="${site.docs.dir}"/>
                        <copy file="${src.doc.dir}/third-party-licenses.txt" todir="${site.docs.dir}"/>

                        <!-- remove unwanted modules from the site html files in the new site directory -->
                        <echo message="removing unwanted modules from site html file..." />
                        <replace dir="${tmp.latest.site.dir}" value="">
                            <include name="*.html" />
                            <include name="whats-new*/*.html" />
                            <replacefilter token="${parent.artifactId}:${parent.version}"/>
                            <replacefilter token="wink-tests:${parent.version}"/>
                            <replacefilter token="wink-component-test-support:${parent.version}"/>
                        </replace>
                        <!-- replacing version and deployment directory according to the current running build in download.html page -->
                        <replace file="${tmp.latest.site.dir}/downloads.html">
                            <replacefilter token="@PROJECT_VERSION@" value="${project.version}"/>
                            <replacefilter token="@DEPLOY_DIRECTORY@" value="${distribution.deploy.directory}"/>
                            <replacefilter token="@DEPLOY_DIRECTORY_RELEASE@" value="${distribution.deploy.directory.release}"/>
                            <replacefilter token="@RESPOSITORY_LOCATION@" value="${distribution.url}"/>
                        </replace>
                        <!-- copy the latest directory to a new directory that includes the revision number -->
                        <copy todir="${sitedir}/site_${project.version}_${buildNumber}">
                            <fileset dir="${tmp.latest.site.dir}" />
                        </copy>
                        <!-- Copy origin file to a temp HTML file - so we can replace the parameter value of @names@ -->
                        <copy file="revisionSiteLinksOrigin.html" tofile="${sitedir}/revisionSiteLinksTemp.html" />
                        <!-- Get the set of directories that start with 'site_' (directory name is built from this string and the revision number,
                            e.g. site_1000 -->
                        <dirset id="dirs" dir="${sitedir}" includes="site_*" />
                        <!-- For each directory path, get the directory name and concatenate all the names separated by a comma
                            e.g. "site_1000,site_1001,site_1002" -->
                        <pathconvert refid="dirs" property="dirs.value" pathsep=",">
                            <map from="${sitedir}/" to="" />
                        </pathconvert>
                        <!-- In the temp HTML file replace the parameter value of @names@ with the directories names string -->
                        <replace file="${sitedir}/revisionSiteLinksTemp.html" token="@names@" value="${dirs.value}" />

                        <!-- Delete the current revision file and replace it with the temp file -->
                        <delete file="${sitedir}/index.html" />
                        <move file="${sitedir}/revisionSiteLinksTemp.html" tofile="${sitedir}/index.html" />

                        <!-- Copy the site directory to Rubicon and create HTML to present the directories -->
                        <!-- 1. Copy the created site into the file system (Rubicon) to tmp directory -->
                        <copy todir="${tmp.file.system.site.dir}">
                            <fileset dir="${tmp.latest.site.dir}"/>
                        </copy>
                        <delete dir="${tmp.latest.site.dir}"/>
                        <!-- Rename current version site directory (if exists) to deleted directory -->
                        <move file="${file.system.site.dir}" todir="${tmp.file.system.todelete.site.dir}" failonerror="false"/>
                        <!-- Rename tmp directory to new version site directory -->
                        <move file="${tmp.file.system.site.dir}" tofile="${file.system.site.dir}"/>
                        <!-- Delete deleted directory (if exists) -->
                        <delete dir="${tmp.file.system.todelete.site.dir}" failonerror="false"/>
                        <!-- 2. Prepare the HTML to present the existing versions site directories -->
                        <!-- Copy origin file to a temp HTML file - so we can replace the parameter value of @names@ -->
                        <copy file="revisionSiteLinksOrigin.html" tofile="${file.system.dir}/revisionSiteLinksTemp.html" />
                        <!-- Get the set of all version directories -->
                        <dirset id="systemdirs" dir="${file.system.dir}" includes="*" />
                        <!-- For each directory path, get the directory name and concatenate all the names separated by a comma -->
                        <pathconvert refid="systemdirs" property="systemdirs.value" pathsep=",">
                            <map from="${file.system.dir}/" to="" />
                        </pathconvert>
                        <!-- In the temp HTML file replace the parameter value of @names@ with the directories names string -->
                        <replace file="${file.system.dir}/revisionSiteLinksTemp.html" token="@names@" value="${systemdirs.value}" />
                        <!-- Delete the current revision file and replace it with the temp file -->
                        <delete file="${file.system.dir}/index.html" />
                        <move file="${file.system.dir}/revisionSiteLinksTemp.html" tofile="${file.system.dir}/index.html" />
                    </tasks>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
